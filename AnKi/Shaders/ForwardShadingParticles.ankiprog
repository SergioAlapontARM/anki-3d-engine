// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator ANKI_TECHNIQUE 3
#pragma anki mutator ANIMATED_TEXTURE 0 1
#pragma anki mutator LIGHT 0 1

#include <AnKi/Shaders/ForwardShadingCommon.glsl>

#pragma anki reflect AnKiLocalUniforms
#pragma anki struct AnKiLocalUniforms
#pragma anki member F32 m_animationPeriod if ANIMATED_TEXTURE is 1
#pragma anki member ANKI_RP Vec4 m_colorScale
#pragma anki member ANKI_RP Vec4 m_colorBias
#pragma anki member U32 m_diffuseMap
#pragma anki struct end

layout(set = kMaterialSetGlobal, binding = kMaterialBindingGlobalUniforms) uniform b_ankiGlobalUniforms
{
	MaterialGlobalUniforms u_ankiGlobals;
};

layout(set = kMaterialSetGlobal, binding = kMaterialBindingTrilinearRepeatSampler) uniform sampler u_globalSampler;

layout(set = kMaterialSetLocal, binding = kMaterialBindingLocalUniforms, std430) buffer b_localUniforms
{
	U32 u_localUniforms[];
};

layout(set = kMaterialSetLocal, binding = kMaterialBindingRenderableGpuView) uniform b_renderableGpuViews
{
	RenderableGpuView u_renderableGpuViews[1];
};

#pragma anki start vert

layout(location = kVertexAttributeIdScale) in F32 in_scale;
layout(location = kVertexAttributeIdAlpha) in F32 in_alpha;

layout(location = 0) flat out ANKI_RP F32 out_alpha;
layout(location = 1) out Vec2 out_uv;
layout(location = 2) out Vec3 out_worldPos;

void main()
{
	out_uv = Vec2(gl_VertexID & 1, gl_VertexID >> 1);

	out_worldPos = u_ankiGlobals.m_cameraTransform * Vec4((out_uv - 0.5) * in_scale, 0.0, 0.0) + in_position;
	gl_Position = u_ankiGlobals.m_viewProjectionMatrix
				  * Vec4(u_renderableGpuViews[0].m_worldTransform * Vec4(out_worldPos, 1.0), 1.0);

	out_alpha = in_alpha;
}
#pragma anki end

#pragma anki start frag

layout(location = 0) flat in ANKI_RP F32 in_alpha;
layout(location = 1) in Vec2 in_uv;
layout(location = 2) in Vec3 in_worldPos;

void main()
{
	const AnKiLocalUniforms localUniforms = loadAnKiLocalUniforms(u_localUniforms, 0u);

#if ANIMATED_TEXTURE == 1
	ANKI_RP Vec4 texCol =
		readAnimatedTextureRgba(u_bindlessTextures2dArrayF32[localUniforms.m_diffuseMap], u_globalSampler,
								localUniforms.m_animationPeriod, in_uv, u_clusteredShading.m_time);
#else
	ANKI_RP Vec4 texCol = texture(u_bindlessTextures2dF32[localUniforms.m_diffuseMap], u_globalSampler, in_uv);
#endif

#if LIGHT
	texCol.rgb = computeLightColorLow(texCol.rgb, in_worldPos);
#endif

	ANKI_RP Vec4 colScale = localUniforms.m_colorScale;
	colScale.a *= in_alpha;
	particleAlpha(texCol, colScale, localUniforms.m_colorBias);
}
#pragma anki end
