// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator ANKI_TECHNIQUE 0 1

#include <AnKi/Shaders/Include/ParticleTypes.h>
#include <AnKi/Shaders/Include/MaterialTypes.h>
#include <AnKi/Shaders/Include/GpuSceneTypes.h>
#include <AnKi/Shaders/Common.glsl>

#pragma anki reflect AnKiLocalUniforms
#pragma anki struct AnKiLocalUniforms
#pragma anki member ANKI_RP Vec3 m_diffColor
#pragma anki member ANKI_RP F32 m_roughness
#pragma anki member ANKI_RP Vec3 m_specColor
#pragma anki member ANKI_RP F32 m_metallic
#pragma anki member ANKI_RP Vec3 m_initialEmission
#pragma anki member ANKI_RP Vec3 m_finalEmission
#pragma anki struct end

layout(set = kMaterialSetLocal, binding = kMaterialBindingLocalUniforms, std430) buffer b_localUniforms
{
	U32 u_localUniforms[];
};

layout(set = kMaterialSetLocal, binding = kMaterialBindingRenderableGpuView) uniform b_renderableGpuView
{
	RenderableGpuView u_renderableGpuViews[1];
};

layout(set = kMaterialSetGlobal, binding = kMaterialBindingGlobalUniforms) uniform b_globalUniforms
{
	MaterialGlobalUniforms u_globalUniforms;
};

layout(set = kMaterialSetLocal, binding = kMaterialBindingFirstNonStandardLocal) buffer b_particles
{
	GpuParticle u_particles[];
};

#pragma anki start vert

layout(location = 0) out Vec2 out_velocity;
layout(location = 1) flat out ANKI_RP F32 out_lifeFactor;
layout(location = 2) out flat ANKI_RP Vec3 out_normal;

void main()
{
	const GpuParticle part = u_particles[gl_VertexID / 2];

	const Vec4 crntClipPos = u_globalUniforms.m_viewProjectionMatrix
							 * Vec4(u_renderableGpuViews[0].m_worldTransform * Vec4(part.m_newWorldPosition, 1.0), 1.0);
	const Vec4 prevClipPos = u_globalUniforms.m_viewProjectionMatrix
							 * Vec4(u_renderableGpuViews[0].m_worldTransform * Vec4(part.m_oldWorldPosition, 1.0), 1.0);

	gl_Position = ((gl_VertexID & 1) == 0) ? crntClipPos : prevClipPos;

	const Vec2 crntNdc = crntClipPos.xy / crntClipPos.w;
	const Vec2 prevNdc = prevClipPos.xy / prevClipPos.w;

	// It's NDC_TO_UV(prevNdc) - NDC_TO_UV(crntNdc) or:
	out_velocity = ((gl_VertexID & 1) == 0) ? Vec2(0.0) : (prevNdc - crntNdc) * 0.5;

	out_lifeFactor = saturate(1.0 - (part.m_life / part.m_startingLife));

	out_normal = normalize(u_globalUniforms.m_cameraTransform[3]);
}
#pragma anki end

#pragma anki start frag
#define MAX_EMISSION 1024.0
#include <AnKi/Shaders/PackFunctions.glsl>

layout(location = 0) out Vec4 out_gbuffer0;
layout(location = 1) out Vec4 out_gbuffer1;
layout(location = 2) out Vec4 out_gbuffer2;
layout(location = 3) out Vec2 out_gbuffer3;

layout(location = 0) in Vec2 in_velocity;
layout(location = 1) flat in ANKI_RP F32 in_lifeFactor;
layout(location = 2) in flat ANKI_RP Vec3 in_normal;

void main()
{
	const AnKiLocalUniforms localUniforms = loadAnKiLocalUniforms(u_localUniforms, 0u);

	GbufferInfo g;
	g.m_diffuse = localUniforms.m_diffColor;
	g.m_normal = in_normal;
	g.m_f0 = localUniforms.m_specColor;
	g.m_roughness = localUniforms.m_roughness;
	g.m_subsurface = 0.0;
	g.m_emission = mix(localUniforms.m_initialEmission, localUniforms.m_finalEmission, in_lifeFactor);
	g.m_metallic = localUniforms.m_metallic;
	g.m_velocity = in_velocity;
	packGBuffer(g, out_gbuffer0, out_gbuffer1, out_gbuffer2, out_gbuffer3);
}
#pragma anki end
