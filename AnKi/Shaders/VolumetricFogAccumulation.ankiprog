// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

ANKI_SPECIALIZATION_CONSTANT_UVEC3(kVolumeSize, 0u);
ANKI_SPECIALIZATION_CONSTANT_U32(kFinalZSplit, 3u);
ANKI_SPECIALIZATION_CONSTANT_U32(kZSplitCount, 4u);

#pragma anki start comp

#include <AnKi/Shaders/Include/ClusteredShadingFunctions.h>
#include <AnKi/Shaders/Include/MiscRendererTypes.h>
#include <AnKi/Shaders/Common.glsl>

const UVec2 kWorkgroupSize = UVec2(8, 8);
layout(local_size_x = kWorkgroupSize.x, local_size_y = kWorkgroupSize.y, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler u_linearAnyClampSampler;
layout(set = 0, binding = 1) uniform ANKI_RP texture3D u_lightVolume;
layout(set = 0, binding = 2) writeonly uniform ANKI_RP image3D u_fogVolume;

layout(push_constant, std140) uniform b_pc
{
	VolumetricFogUniforms u_unis;
};

void main()
{
	if(any(greaterThanEqual(gl_GlobalInvocationID.xy, kVolumeSize.xy)))
	{
		return;
	}

	const Vec2 uv = (Vec2(gl_GlobalInvocationID.xy) + 0.5) / Vec2(kVolumeSize.xy);

	ANKI_RP Vec4 colorAndDensityFront = Vec4(0.0);
	ANKI_LOOP for(U32 i = 0u; i < kVolumeSize.z; ++i)
	{
		const ANKI_RP F32 fi = F32(i);

		// Compute the linear depth
		const ANKI_RP F32 maxLinearDepth = F32(kFinalZSplit + 1u) / F32(kZSplitCount);
		const ANKI_RP F32 linearDepthFraction = maxLinearDepth / F32(kVolumeSize.z);
		const ANKI_RP F32 linearDepthNear = fi * linearDepthFraction;
		const ANKI_RP F32 linearDepthFar = (fi + 1.0) * linearDepthFraction;

		// Compute the min and max Z in view space if this cluster fragment
		const ANKI_RP F32 zVSpaceNear = -linearDepthNear * (u_unis.m_far - u_unis.m_near) + u_unis.m_near;
		const ANKI_RP F32 zVSpaceFar = -linearDepthFar * (u_unis.m_far - u_unis.m_near) + u_unis.m_near;

		// Compute the thikness of this fragment
		const ANKI_RP F32 layerThinkness = abs(zVSpaceNear - zVSpaceFar);

		// Read the light value and the fog density from the fog volumes
		const ANKI_RP F32 w = (fi + 0.5) / F32(kVolumeSize.z);
		ANKI_RP Vec4 lightAndFogDensity = textureLod(u_lightVolume, u_linearAnyClampSampler, Vec3(uv, w), 0.0);
		lightAndFogDensity.xyz *= u_unis.m_fogDiffuse / kPi;

		// Scattering & absorption
		const ANKI_RP F32 scattering = lightAndFogDensity.w * u_unis.m_fogScatteringCoeff * layerThinkness;
		const ANKI_RP F32 absorption = lightAndFogDensity.w * u_unis.m_fogAbsorptionCoeff * layerThinkness;

		// Integrate
		const ANKI_RP Vec4 colorAndDensityBack = Vec4(lightAndFogDensity.xyz * scattering, scattering + absorption);

		const ANKI_RP Vec3 l =
			colorAndDensityFront.rgb + saturate(exp(-colorAndDensityFront.a)) * colorAndDensityBack.rgb;
		colorAndDensityFront = Vec4(l.rgb, colorAndDensityFront.a + colorAndDensityBack.a);

		// Write the value
		const ANKI_RP Vec4 valToWrite = Vec4(colorAndDensityFront.rgb, saturate(exp(-colorAndDensityFront.a)));
		imageStore(u_fogVolume, IVec3(UVec3(gl_GlobalInvocationID.xy, i)), valToWrite);
	}
}

#pragma anki end
