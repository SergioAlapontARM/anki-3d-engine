// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki mutator FILM_GRAIN 0 1
#pragma anki mutator BLOOM_ENABLED 0 1
#pragma anki mutator DBG_ENABLED 0 1

ANKI_SPECIALIZATION_CONSTANT_U32(kLutSize, 0u);
ANKI_SPECIALIZATION_CONSTANT_UVEC2(kFramebufferSize, 1u);
ANKI_SPECIALIZATION_CONSTANT_U32(kMotionBlurSamples, 3u);

#pragma anki start vert
#include <AnKi/Shaders/QuadVert.glsl>
#pragma anki end

#pragma anki start frag
#include <AnKi/Shaders/Common.glsl>
#include <AnKi/Shaders/Functions.glsl>
#include <AnKi/Shaders/MotionBlur.glsl>

layout(set = 0, binding = 0) uniform sampler u_nearestAnyClampSampler;
layout(set = 0, binding = 1) uniform sampler u_linearAnyClampSampler;
layout(set = 0, binding = 2) uniform sampler u_trilinearRepeatSampler;

layout(set = 0, binding = 3) uniform ANKI_RP texture2D u_lightShadingRt;
layout(set = 0, binding = 4) uniform ANKI_RP texture2D u_ppsBloomLfRt;
layout(set = 0, binding = 5) uniform ANKI_RP texture3D u_lut;
layout(set = 0, binding = 6) uniform texture2D u_motionVectorsRt;
layout(set = 0, binding = 7) uniform texture2D u_depthRt;
#if DBG_ENABLED
layout(set = 0, binding = 8) uniform ANKI_RP texture2D u_dbgOutlineRt;
#endif

layout(push_constant, std140) uniform b_pc
{
	Vec2 u_padding0;
	F32 u_filmGrainStrength;
	U32 u_frameCount;
};

layout(location = 0) in Vec2 in_uv;
layout(location = 0) out ANKI_RP Vec3 out_color;

ANKI_RP Vec3 colorGrading(ANKI_RP Vec3 color)
{
	const ANKI_RP Vec3 kLutScale = Vec3((F32(kLutSize) - 1.0) / F32(kLutSize));
	const ANKI_RP Vec3 kLutOffset = Vec3(1.0 / (2.0 * F32(kLutSize)));

	color = min(color, Vec3(1.0));
	const ANKI_RP Vec3 lutCoords = color * kLutScale + kLutOffset;
	return textureLod(u_lut, u_trilinearRepeatSampler, lutCoords, 0.0).rgb;
}

void main()
{
	const Vec2 uv = in_uv;

	if(kMotionBlurSamples > 0u)
	{
		out_color = motionBlur(u_motionVectorsRt, u_nearestAnyClampSampler, u_lightShadingRt, Vec2(kFramebufferSize),
							   u_linearAnyClampSampler, uv, kMotionBlurSamples);
	}
	else
	{
		out_color = textureLod(u_lightShadingRt, u_linearAnyClampSampler, uv, 0.0).rgb;
	}

#if BLOOM_ENABLED
	const ANKI_RP Vec3 bloom = textureLod(u_ppsBloomLfRt, u_linearAnyClampSampler, uv, 0.0).rgb;
	out_color += bloom;
#endif

	out_color = colorGrading(out_color);

#if FILM_GRAIN
	const ANKI_RP F32 dt = 1.0;
	out_color = filmGrain(out_color, uv, u_filmGrainStrength, F32(u_frameCount % 0xFFFFu) * dt);
#endif

#if DBG_ENABLED
	const ANKI_RP Vec4 dbg = textureLod(u_dbgOutlineRt, u_linearAnyClampSampler, uv, 0.0);
	out_color = mix(out_color, dbg.rgb, dbg.a);
#endif
}

#pragma anki end
