// Copyright (C) 2009-2022, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

#pragma anki start comp

#include <AnKi/Shaders/RtShadows.glsl>
#include <AnKi/Shaders/Functions.glsl>
#include <AnKi/Shaders/BilateralFilter.glsl>

ANKI_SPECIALIZATION_CONSTANT_UVEC2(kOutImageSize, 0u);

const UVec2 kWorkgroupSize = UVec2(8u, 8u);
layout(local_size_x = kWorkgroupSize.x, local_size_y = kWorkgroupSize.y, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler u_nearestAnyClampSampler;
layout(set = 0, binding = 1) uniform sampler u_linearAnyClampSampler;
layout(set = 0, binding = 2) uniform utexture2D u_quarterShadowsTex;
layout(set = 0, binding = 3) uniform uimage2D u_fullShadowsImage;
layout(set = 0, binding = 4) uniform texture2D u_quarterDepthTex;
layout(set = 0, binding = 5) uniform texture2D u_fullDepthTex;

void main()
{
	if(skipOutOfBoundsInvocations(kWorkgroupSize, kOutImageSize))
	{
		return;
	}

	const Vec2 uv = (Vec2(gl_GlobalInvocationID.xy) + 0.5) / Vec2(kOutImageSize);

	// Reference
	const F32 depthCenter = textureLod(u_fullDepthTex, u_linearAnyClampSampler, uv, 0.0).x;

	F32 sumShadowLayers[kMaxRtShadowLayers];
	zeroRtShadowLayers(sumShadowLayers);

	// Do a bilateral upscale
	const Vec2 texelSize = 1.0 / Vec2(kOutImageSize / 2u);
	const I32 radius = 1;
	F32 sumWeight = kEpsilonf;
	for(I32 x = -radius; x <= radius; ++x)
	{
		for(I32 y = -radius; y <= radius; ++y)
		{
			const Vec2 sampleUv = uv + Vec2(x, y) * texelSize;
			const F32 depthTap = textureLod(u_quarterDepthTex, u_linearAnyClampSampler, sampleUv, 0.0).x;

			const F32 w = calculateBilateralWeightDepth(depthCenter, depthTap, 1.0);

			F32 shadowLayers[kMaxRtShadowLayers];
			unpackRtShadows(textureLod(u_quarterShadowsTex, u_nearestAnyClampSampler, sampleUv, 0.0), shadowLayers);

			for(U32 i = 0u; i < kMaxRtShadowLayers; ++i)
			{
				sumShadowLayers[i] += shadowLayers[i] * w;
			}

			sumWeight += w;
		}
	}

	for(U32 i = 0u; i < kMaxRtShadowLayers; ++i)
	{
		sumShadowLayers[i] /= sumWeight;
	}

	imageStore(u_fullShadowsImage, IVec2(gl_GlobalInvocationID.xy), packRtShadows(sumShadowLayers));
}

#pragma anki end
